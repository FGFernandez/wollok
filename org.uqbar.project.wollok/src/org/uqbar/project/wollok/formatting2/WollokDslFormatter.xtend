/*
 * generated by Xtext
 */
package org.uqbar.project.wollok.formatting2

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.uqbar.project.wollok.services.WollokDslGrammarAccess
import org.uqbar.project.wollok.wollokDsl.Import
import org.uqbar.project.wollok.wollokDsl.WAssignment
import org.uqbar.project.wollok.wollokDsl.WBlockExpression
import org.uqbar.project.wollok.wollokDsl.WClass
import org.uqbar.project.wollok.wollokDsl.WExpression
import org.uqbar.project.wollok.wollokDsl.WFile
import org.uqbar.project.wollok.wollokDsl.WLibraryElement
import org.uqbar.project.wollok.wollokDsl.WMemberFeatureCall
import org.uqbar.project.wollok.wollokDsl.WMethodDeclaration
import org.uqbar.project.wollok.wollokDsl.WNamedObject
import org.uqbar.project.wollok.wollokDsl.WProgram
import org.uqbar.project.wollok.wollokDsl.WTest
import org.uqbar.project.wollok.wollokDsl.WVariableDeclaration

import static extension org.uqbar.project.wollok.model.WMethodContainerExtensions.*

class WollokDslFormatter extends AbstractFormatter2 {
	
	@Inject extension WollokDslGrammarAccess

	def dispatch void format(WFile wFile, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		for (Import _import : wFile.getImports()) {
			_import.format
		}
		for (WLibraryElement wLibraryElement : wFile.getElements()) {
			wLibraryElement.format
		}
		wFile.getMain.format
		for (WTest wTest : wFile.getTests()) {
			wTest.format
		}
		wFile.getSuite.format
	}

	def dispatch void format(WProgram wProgram, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (WExpression wExpression : wProgram.getElements()) {
			wExpression.format
		}
	}

	def dispatch void format(WClass c, extension IFormattableDocument document) {
		c.interior [ 
			indent
		]
		c.variableDeclarations.forEach [
			format
		]
		
		c.constructors.forEach [
			format
		]
		
		c.methods.forEach [
			format
		]
	}

	def dispatch void format(WNamedObject o, extension IFormattableDocument document) {
		o.interior [ 
			indent
		]
		o.variableDeclarations.forEach [
			format
		]
		
		o.methods.forEach [
			format
		]
	}

	def dispatch void format(WVariableDeclaration v, extension IFormattableDocument document) {
		v.surround[	newLine	]
	}
	
	def dispatch void format(WMethodDeclaration m, extension IFormattableDocument document) {
		m.surround [ newLine ]
		m.expression => [
			format
		]
	}
	
	def dispatch void format(WBlockExpression b, extension IFormattableDocument document) {
		b.regionFor.keyword("{").append[ newLine ]
		b.expressions.forEach [
			surround [ indent ]
			format
		]
		b.regionFor.keyword("}").append[ newLine ]
	}

	def dispatch void format(WMemberFeatureCall c, extension IFormattableDocument document) {
		println("member feature " + c)
		c.prepend [ indent ]
		c.append [ newLine ]
	}
	
	def dispatch void format(WAssignment a, extension IFormattableDocument document) {
		a.append[ newLine ]
	}
	// TODO: implement for WTest, WSuite, WFixture, WPackage, WObjectLiteral, WVariableDeclaration, WMethodDeclaration, WAssignment, WBinaryOperation, WUnaryOperation, WMemberFeatureCall, WSuperInvocation, WBlockExpression, WIfExpression, WClosure, WListLiteral, WSetLiteral, WNamedObject, WClass, WMixin, WConstructor, WSelfDelegatingConstructorCall, WSuperDelegatingConstructorCall, WConstructorCall, WTry, WCatch, WReturnExpression, WThrow, WPostfixOperation
}
