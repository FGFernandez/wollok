package org.uqbar.project.wollok.tests.quickfix

import org.junit.Test
import org.uqbar.project.wollok.ui.Messages

class ConstructorsQuickFixTest extends AbstractWollokQuickFixTestCase {
	
	@Test
	def addOneConstructorsFromSuperclass(){
		val initial = #['''
			class MyClass{
				const y
				constructor(x){
					y = x
				}
				
				method someMethod(){
					return null
				}
			}
			
			object aWKO inherits MyClass {
			}
		''']

		val result = #['''
			class MyClass{
				const y
				constructor(x){
					y = x
				}
				
				method someMethod(){
					return null
				}
			}
			
			object aWKO inherits MyClass(x)  {
			}
		''']
		assertQuickfix(initial, result, Messages.WollokDslQuickFixProvider_add_constructors_superclass_name)
	}

	@Test
	def createConstructorInSuperclassWithEnter(){
		val initial = #['''
			class MyClass{
			}
			
			class MySubclass inherits MyClass {
				const y
				
				constructor(x) = super(x) {
					y = x
				}
			}
		''']

		val result = #['''
			class MyClass{
			
				constructor(param1){
					//TODO: Autogenerated Code ! 
				}
			}
			
			class MySubclass inherits MyClass {
				const y
				
				constructor(x) = super(x) {
					y = x
				}
			}
		''']
		assertQuickfix(initial, result, Messages.WollokDslQuickFixProvider_create_constructor_superclass_name)
	}

	@Test
	def createConstructorInSuperclassWithoutChars(){
		val initial = #['''
			class MyClass{}
			
			class MySubclass inherits MyClass {
				const y
				
				constructor(x) = super(x) {
					y = x
				}
			}
		''']

		val result = #['''
			class MyClass{
				constructor(param1){
					//TODO: Autogenerated Code ! 
				}
			}
			
			class MySubclass inherits MyClass {
				const y
				
				constructor(x) = super(x) {
					y = x
				}
			}
		''']
		assertQuickfix(initial, result, Messages.WollokDslQuickFixProvider_create_constructor_superclass_name)
	}

	@Test
	def createConstructorInSuperclassWithSingleChar(){
		val initial = #['''
			class MyClass{ }
			
			class MySubclass inherits MyClass {
				const y
				
				constructor(x) = super(x) {
					y = x
				}
			}
		''']

		val result = #['''
			class MyClass{ 
				constructor(param1){
					//TODO: Autogenerated Code ! 
				}
			}
			
			class MySubclass inherits MyClass {
				const y
				
				constructor(x) = super(x) {
					y = x
				}
			}
		''']
		assertQuickfix(initial, result, Messages.WollokDslQuickFixProvider_create_constructor_superclass_name)
	}

	@Test
	def createConstructorInSuperclassWithMethods(){
		val initial = #['''
			class MyClass{
				method oneMethod() {
					console.println("hello")
				}
			}
			
			class MySubclass inherits MyClass {
				const y
				
				constructor(x) = super(x) {
					y = x
				}
			}
		''']

		val result = #['''
			class MyClass{
				constructor(param1){
					//TODO: Autogenerated Code ! 
				}
				method oneMethod() {
					console.println("hello")
				}
			}
			
			class MySubclass inherits MyClass {
				const y
				
				constructor(x) = super(x) {
					y = x
				}
			}
		''']
		assertQuickfix(initial, result, Messages.WollokDslQuickFixProvider_create_constructor_superclass_name)
	}

	@Test
	def createConstructorInSuperclassWithConstructorsAndMethods(){
		val initial = #['''
			class MyClass{
				constructor() {
					
				}
				
				method oneMethod() {
					console.println("hello")
				}
			}
			
			class MySubclass inherits MyClass {
				const y
				
				constructor(x) = super(x) {
					y = x
				}
			}
		''']

		val result = #['''
			class MyClass{
				constructor() {
					
				}
				constructor(param1){
					//TODO: Autogenerated Code ! 
				}
				
				method oneMethod() {
					console.println("hello")
				}
			}
			
			class MySubclass inherits MyClass {
				const y
				
				constructor(x) = super(x) {
					y = x
				}
			}
		''']
		assertQuickfix(initial, result, Messages.WollokDslQuickFixProvider_create_constructor_superclass_name)
	}

	@Test
	def createConstructorInSuperclassWithHardDefinition(){
		val initial = #['''
			class MyClass{
				var a = 1
				
				
				var b = 2
				var c = 3
				
				constructor() {}
				constructor(_a, _b, _c, _d) {
				}
				
				
				
				
				method oneMethod() {
					console.println("hello")
				}
				
				
				method anotherMethod() {
					a = a + 1
					b = b + 1
					c = c + 1
				}
			}
			
			class MySubclass inherits MyClass {
				const y
				
				constructor(x) = super(x) {
					y = x
				}
			}
		''']

		val result = #['''
			class MyClass{
				var a = 1
				
				
				var b = 2
				var c = 3
				
				constructor() {}
				constructor(_a, _b, _c, _d) {
				}
				constructor(param1){
					//TODO: Autogenerated Code ! 
				}
				
				
				
				
				method oneMethod() {
					console.println("hello")
				}
				
				
				method anotherMethod() {
					a = a + 1
					b = b + 1
					c = c + 1
				}
			}
			
			class MySubclass inherits MyClass {
				const y
				
				constructor(x) = super(x) {
					y = x
				}
			}
		''']
		assertQuickfix(initial, result, Messages.WollokDslQuickFixProvider_create_constructor_superclass_name)
	}

	@Test
	def createConstructorInSuperclassWithConstructorsAndMethodsNoEnter(){
		val initial = #['''
			class MyClass{
				constructor() {
					
				}
				method oneMethod() {
					console.println("hello")
				}
			}
			
			class MySubclass inherits MyClass {
				const y
				
				constructor(x) = super(x) {
					y = x
				}
			}
		''']

		val result = #['''
			class MyClass{
				constructor() {
					
				}
				constructor(param1){
					//TODO: Autogenerated Code ! 
				}
				method oneMethod() {
					console.println("hello")
				}
			}
			
			class MySubclass inherits MyClass {
				const y
				
				constructor(x) = super(x) {
					y = x
				}
			}
		''']
		assertQuickfix(initial, result, Messages.WollokDslQuickFixProvider_create_constructor_superclass_name)
	}

	@Test
	def removeDuplicatedConstructor(){
		val initial = #['''
			class MyClass {
				const y
				
				constructor(x) {
					y = x
				}
				
				constructor(x) {
					y = x
				}
			}
		''']

		val result = #['''
			class MyClass {
				const y
				
				
				
				constructor(x) {
					y = x
				}
			}
		''']
		assertQuickfix(initial, result, Messages.WollokDslQuickFixProvider_remove_constructor_name, 2)
	}

	@Test
	def addNewConstructorInRefClassNoParams(){
		val initial = #[
		'''
		class A {
			const y
			constructor(_y){
				y = _y
			}
		
			method someMethod(){
				return null
			}
		}
		
		class B {
			method b() {
				const a = new A()
				console.println(a.toString())
			}
		}
		''']

		val result = #[
		'''
		class A {
			const y
			constructor(_y){
				y = _y
			}
			constructor() {
				//TODO: Autogenerated Code ! 
			}
		
			method someMethod(){
				return null
			}
		}
		
		class B {
			method b() {
				const a = new A()
				console.println(a.toString())
			}
		}
		''']
		assertQuickfix(initial, result, Messages.WollokDslQuickFixProvider_create_constructor_class_name)
	}
	
	@Test
	def addNewConstructorInRefClassOneParam(){
		val initial = #[
		'''
		class A {
			var y = 0
			method someMethod(){
				return y
			}
		}
		
		class B {
			method b() {
				const a = new A("hola")
				console.println(a.toString())
			}
		}
		''']

		val result = #[
		'''
		class A {
			var y = 0
			constructor(param1) {
				//TODO: Autogenerated Code ! 
			}
			method someMethod(){
				return y
			}
		}
		
		class B {
			method b() {
				const a = new A("hola")
				console.println(a.toString())
			}
		}
		''']
		assertQuickfix(initial, result, Messages.WollokDslQuickFixProvider_create_constructor_class_name)
	}
	
	@Test
	def addNewConstructorInRefClassSeveralParams(){
		val initial = #[
		'''
		class A {
			var y = 0
			method someMethod(){
				return y
			}
		}
		
		class B {
			method b() {
				const a = new A("hola", 1)
				console.println(a.toString())
			}
		}
		''']

		val result = #[
		'''
		class A {
			var y = 0
			constructor(param1, param2) {
				//TODO: Autogenerated Code ! 
			}
			method someMethod(){
				return y
			}
		}
		
		class B {
			method b() {
				const a = new A("hola", 1)
				console.println(a.toString())
			}
		}
		''']
		assertQuickfix(initial, result, Messages.WollokDslQuickFixProvider_create_constructor_class_name)
	}

}