/* XPECT_SETUP org.uqbar.project.wollok.tests.typesystem.xpect.TypeSystemXpectTestCase END_SETUP */

object numberTest {

	// XPECT methodType at m0 --> (Any) => Void
	method m0(_a) {
		2.checkNotNull(_a, "m0")
		console.println("end")
	}

	// XPECT methodType at m1 --> (Number) => Number
	method m1(a) = (a ** 2).div(5)

	// XPECT methodType at m2 --> (Number, Number) => Number
	method m2(a, b) {
		return (a + b) / (a - b) * a
	}

	// XPECT methodType at m3 --> (Number) => Boolean
	method m3(a) {
		return a === 2
	}
	
	// XPECT methodType at m4 --> (Any) => Boolean
	method m4(a) {
		return 3 == a
	}
 
	// X PECT methodType at m5 --> (Number) => Boolean
	//method m5(a) {
	//	return 2 == a
	//}
	
	// XPECT methodType at m6 --> (Number) => String
	method m6(a) {
		return (a % 2).toString()
	}
	
	// XPECT methodType at m7 --> (Number) => Range
	method m7(a) {
		return 1..(a)
	}
	
	// XPECT methodType at m8 --> (Number) => Boolean
	method m8(a) = a > (a - 1)

	// XPECT methodType at m9 --> (Number) => Boolean
	method m9(a) = a < (a - 1)

	// XPECT methodType at m10 --> (Number) => Boolean
	method m10(a) = a <= (a - 1)

	// XPECT methodType at m11 --> (Number) => Number
	method m11(a) = if (a >= 0) 0 else 1

	// XPECT methodType at m12 --> (Number) => Number
	method m12(a) = a.abs() + 1

	// XPECT methodType at m13 --> (Number) => Number
	method m13(a) {
		// XPECT type at value --> Number
		const value = a.invert()
		return a.max(value)
	}

	// XPECT methodType at m14 --> (Number) => Number
	method m14(a) = a.min(a.limitBetween(0, 1))
}
